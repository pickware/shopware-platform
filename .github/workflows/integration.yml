name: Integration tests

on:
  pull_request:
  merge_group:
  workflow_dispatch:
    inputs:
      nightly:
        default: ""
  workflow_call:
    inputs:
      nightly:
        type: string
        default: ""

jobs:
  acceptance:
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        name:
          - "Platform"
        php-version:
          - "8.4"
        shard:
          - '1'
          - '2'
          - '3'
        shard-count:
          - 3
        include:
          # TODO: enable them in nightly/queue again with help of shopware/github-actions#67
          # - name: "Platform"
          #   major: "major"
          #   php-version: 8.2
          # - name: "Platform"
          #   major: "major"
          #   php-version: 8.4
          - name: "Install"
            major: ''
            php-version: 8.2
            shard: 1
            shard-count: 1
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # 4
      - uses: ./.github/actions/ats
        with:
          project: ${{ matrix.name }}
          php-version: ${{ matrix.php-version }}
          shard: ${{ matrix.shard }}
          shard-count: ${{ matrix.shard-count }}
          workers: 1
          install: ${{ matrix.name != 'Install' && 'true' || 'false' }}
          extra-options: ${{ matrix.name != 'Install' && '' || '--trace=on' }}
          use-currents: ${{ inputs.nightly == 'true' && matrix.php-version == '8.4' && !matrix.major && 'true' || '' }}
          currents-project-id: ${{ secrets.CURRENTS_PROJECT_ID }}
          currents-record-key: ${{ secrets.CURRENTS_RECORD_KEY }}

  phpunit-matrix:
    runs-on: ubuntu-24.04
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # 4
      - id: generate-matrix
        run: |
          MATRIX=$(php .github/bin/generate-phpunit-matrix.php "${{ inputs.nightly }}")
          echo $MATRIX
          echo "matrix<<EOF" >> $GITHUB_OUTPUT
          echo "$MATRIX" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

  phpunit:
    name: "${{ matrix.php}} ${{ matrix.test.testsuite }}${{ matrix.test.path }} ${{ matrix.db }}"
    needs:
      - phpunit-matrix
    runs-on: ubuntu-24.04
    strategy: ${{ fromJson(needs.phpunit-matrix.outputs.matrix) }}
    env:
      APP_ENV: test
      DATABASE_URL: mysql://root@127.0.0.1:3306/root
      REDIS_URL: redis://localhost:6379
      APP_URL: http://localhost:8000
      APP_SECRET: def00000bb5acb32b54ff8ee130270586eec0e878f7337dc7a837acc31d3ff00f93a56b595448b4b29664847dd51991b3314ff65aeeeb761a133b0ec0e070433bff08e48
      OPENSEARCH_URL: 127.0.0.1:9200
      ADMIN_OPENSEARCH_URL: 127.0.0.1:9200
      BLUE_GREEN_DEPLOYMENT: 1
      PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: "true"
      COMPOSER_ROOT_VERSION: 6.7.9999999-dev

    services:
      elasticsearch:
        image: ${{ matrix.test.path != '' && 'opensearchproject/opensearch:1' || 'alpine' }}
        env:
          discovery.type: single-node
          plugins.security.disabled: "true"
        ports:
          - "9200:9200"
      database:
        image: ${{ matrix.db }}
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
          MYSQL_DATABASE: shopware
        ports:
          - "3306:3306"
        options: --health-cmd="mysqladmin ping || mariadb-admin ping"
      redis:
        image: redis:alpine
        ports:
          - "6379:6379"
    steps:
      - name: Setup Shopware
        uses: shopware/setup-shopware@main
        with:
          php-version: ${{ matrix.php }}
          mysql-version: "skip"
          shopware-version: ${{ github.ref }}
          shopware-repository: ${{ github.repository }}

      - name: Start Webserver
        run: symfony server:start -d

      - name: Install Shopware
        run: php src/Core/TestBootstrap.php

      - name: Run PHPUnit testsuite
        if: ${{ matrix.test.testsuite != '' }}
        run: php -d memory_limit=-1 vendor/bin/phpunit --log-junit junit.xml --testsuite "${{ matrix.test.testsuite }}"

      - name: Run PHPUnit path
        if: ${{ matrix.test.path != '' }}
        run: php -d memory_limit=-1 vendor/bin/phpunit --log-junit junit.xml -- tests/integration/${{ matrix.test.path }}

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@f2dba722c67b86c6caa034178c6e4d35335f6706 # 1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}


  win-checkout:
    runs-on: windows-latest
    if: ${{ github.event_name != 'pull_request' }}
    name: "Windows check"

    steps:
      - name: Support longpaths
        run: git config --system core.longpaths true

      - name: Clone platform
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # 4
  php-security:
    runs-on: ubuntu-24.04
    name: "Composer dependencies"
    env:
      COMPOSER_ROOT_VERSION: 6.7.9999999-dev
    steps:
      - name: Clone platform
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # 4

      - name: Setup PHP
        uses: shivammathur/setup-php@6c489b2fc701c5f9ed70ccebe221b567bee578c0 # 2
        with:
          php-version: "8.2"

      - name: Install Composer
        run: |
          composer install --no-interaction --no-scripts
          curl --location --output local-php-security-checker https://github.com/fabpot/local-php-security-checker/releases/download/v1.0.0/local-php-security-checker_1.0.0_linux_amd64
          echo 'e5b12488ca78bc07c149e9352278bf10667b88a8461caac10154f9a6f5476369  local-php-security-checker' > local-php-security-checker.sha256
          sha256sum --check local-php-security-checker.sha256
          chmod +x local-php-security-checker

      - name: Run on platform
        run: ./local-php-security-checker
  code-ql:
    name: Analyze
    if: ${{ github.repository == 'shopware/shopware' }}
    runs-on: ubuntu-24.04

    strategy:
      fail-fast: false
      matrix:
        language: [ "javascript" ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # 4
        with:
          fetch-depth: 2

      - name: Initialize CodeQL
        uses: github/codeql-action/init@6bb031afdd8eb862ea3fc1848194185e076637e5 #  v3.28.11

        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@6bb031afdd8eb862ea3fc1848194185e076637e5 #  v3.28.11

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@6bb031afdd8eb862ea3fc1848194185e076637e5 #  v3.28.11

  tested-update-versions:
    name: tested-versions
    runs-on: ubuntu-24.04
    outputs:
      first-version: ${{ steps.versions.outputs.first-version }}
      latest-version: ${{ steps.versions.outputs.latest-version }}
      lts-first-version: ${{ steps.versions.outputs.lts-first-version }}
      lts-latest-version: ${{ steps.versions.outputs.lts-latest-version }}
    steps:
      - name: Generate versions
        id: versions
        uses: shopware/github-actions/versions@main

  acceptance-update:
    needs: tested-update-versions
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        update:
          - version: ${{ needs.tested-update-versions.outputs.lts-latest-version }}
          - version: ${{ needs.tested-update-versions.outputs.first-version }}
          - version: ${{ needs.tested-update-versions.outputs.latest-version }}
    env:
      SHOPWARE_HTTP_CACHE_ENABLED: 0
      BLUE_GREEN_DEPLOYMENT: 1
      SHOPWARE_DISABLE_UPDATE_CHECK: "0"
      SHOPWARE_UPDATE_FROM: ${{ matrix.update.version }}
      SW_RECOVERY_NEXT_VERSION: "6.7.9999999.9999999"
      SW_RECOVERY_NEXT_BRANCH: "6.7.9999999.9999999"
      SW_RECOVERY_REPOSITORY: '{"type": "path", "url": "${{ github.workspace }}/new-shopware/src/*", "options": { "symlink": true } }'
    steps:
      - name: Create shopware dirs
        run: mkdir -p old-shopware new-shopware
      - name: Setup new Shopware
        uses: shopware/setup-shopware@main
        env:
          COMPOSER_ROOT_VERSION: 6.7.9999999-dev
        with:
          shopware-version: ${{ github.ref }}
          shopware-repository: ${{ github.repository }}
          install-admin: true
          env: dev
          path: new-shopware

      - name: Build new shopware
        working-directory: new-shopware
        run: |
          composer run npm:storefront ci
          composer run npm:storefront run production
          (cd src/Storefront/Resources/app/storefront && node copy-to-vendor.js)

          composer -d src/Core config version ${SW_RECOVERY_NEXT_VERSION}
          composer -d src/Administration config version ${SW_RECOVERY_NEXT_VERSION}
          composer -d src/Storefront config version ${SW_RECOVERY_NEXT_VERSION}
          composer -d src/Elasticsearch config version ${SW_RECOVERY_NEXT_VERSION}

      - name: Build updater
        working-directory: new-shopware/src/WebInstaller
        run: |
          composer config platform.php 8.2
          composer install
          composer build-phar

      - name: Checkout template
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # 4
        with:
          repository: shopware/production
          path: old-shopware

      - name: Configure project root
        run: |
          echo "PROJECT_ROOT=${{ github.workspace }}/old-shopware" >> "$GITHUB_ENV"

      - name: Require shopware
        working-directory: old-shopware
        run: composer require shopware/core:${{ matrix.update.version }}

      - name: Install
        working-directory: old-shopware
        run: |
          sed -i -e "s/shopware.store.frw: '1'/shopware.store.frw: '0'"/ config/services.yaml
          bin/console system:install --basic-setup --drop-database --create-database

      - name: Copy WebInstaller
        run: cp new-shopware/src/WebInstaller/shopware-installer.phar.php old-shopware/public/shopware-installer.phar.php

      - name: Start web server
        working-directory: old-shopware
        run: symfony server:start -d

      - uses: actions/setup-node@cdca7365b2dadb8aad0a33bc7601856ffabcc48e # 4
        with:
          node-version: 20
      - name: Install dependencies
        working-directory: new-shopware/tests/acceptance
        run: npm ci
      - name: Install Playwright Browsers
        working-directory: new-shopware/tests/acceptance
        run: npx playwright install --with-deps chromium
      - name: Run update tests with reporting
        if: inputs.nightly == 'true'
        working-directory: new-shopware/tests/acceptance
        run: npx pwc --project-id ${{ secrets.CURRENTS_PROJECT_ID }} --key ${{ secrets.CURRENTS_RECORD_KEY }} -- --project=Update --trace=on
      - name: Run update tests
        if: inputs.nightly != 'true'
        working-directory: new-shopware/tests/acceptance
        run: npx playwright test --project=Update --trace=on

      - uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # 4
        if: always()
        with:
          name: playwright-report-update-${{ matrix.update.version }}
          path: new-shopware/tests/acceptance/test-results/
          retention-days: 3

  blue-green-67-68:
    name: "PHP blue green 6.7 -> 6.8 -> 6.7"
    runs-on: ubuntu-24.04
    env:
      APP_ENV: test
      APP_URL: http://localhost:8000
      APP_SECRET: def00000bb5acb32b54ff8ee130270586eec0e878f7337dc7a837acc31d3ff00f93a56b595448b4b29664847dd51991b3314ff65aeeeb761a133b0ec0e070433bff08e48
      OPENSEARCH_URL: 127.0.0.1:9200
      ADMIN_OPENSEARCH_URL: 127.0.0.1:9200
      BLUE_GREEN_DEPLOYMENT: 1
      PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: "true"

    services:
      elasticsearch:
        image: "opensearchproject/opensearch:1"
        env:
          discovery.type: single-node
          plugins.security.disabled: "true"
        ports:
          - "9200:9200"

    steps:
      - name: Setup previous major version
        uses: shopware/setup-shopware@main
        with:
          install: "false"
          shopware-version: ${{ github.ref }}
          shopware-repository: ${{ github.repository }}

      - name: Start Webserver
        run: symfony server:start -d

      - name: Install Shopware in previous major version on test DB
        if: inputs.nightly == 'true'
        run: composer init:testdb

      - name: Run next major migrations on test DB
        if: inputs.nightly == 'true'
        run: DATABASE_URL="mysql://root@127.0.0.1:3306/shopware_test" bin/console database:migrate --all core.V6_8

      - name: Run integration tests
        if: inputs.nightly == 'true'
        run: php -d memory_limit=-1 vendor/bin/phpunit --testsuite "integration" --exclude-group=not-deterministic --stop-on-error --stop-on-failure

      - name: Install Shopware in previous major version
        if: inputs.nightly != 'true'
        run: bin/console system:install --basic-setup --create-database --skip-assets-install

      - name: Run next major migrations
        if: inputs.nightly != 'true'
        run: bin/console database:migrate --all core.V6_8

      - name: Run blue-green check
        if: inputs.nightly != 'true'
        run: php .github/bin/blue-green-check.php

  blue-green-66-67:
    name: "PHP blue green 6.6 -> 6.7 -> 6.6"
    runs-on: ubuntu-24.04
    env:
      APP_ENV: test
      APP_URL: http://localhost:8000
      APP_SECRET: def00000bb5acb32b54ff8ee130270586eec0e878f7337dc7a837acc31d3ff00f93a56b595448b4b29664847dd51991b3314ff65aeeeb761a133b0ec0e070433bff08e48
      OPENSEARCH_URL: 127.0.0.1:9200
      BLUE_GREEN_DEPLOYMENT: 1
      PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: "true"
      PREVIOUS_MAJOR_VERSION_BRANCH: "6.6.x"

    services:
      elasticsearch:
        image: "opensearchproject/opensearch:1"
        env:
          discovery.type: single-node
          plugins.security.disabled: "true"
        ports:
          - "9200:9200"

    steps:
      - name: Setup previous major version
        uses: shopware/setup-shopware@main
        with:
          install: "false"
          shopware-version: ${{ env.PREVIOUS_MAJOR_VERSION_BRANCH }}
          shopware-repository: ${{ github.repository }}

      - name: Start Webserver
        run: symfony server:start -d

      - name: Install Shopware in previous major version on test DB
        run: composer init:testdb

      - name: Checkout current major version
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # 4
        with:
          ref: ${{ github.ref }}

      - name: Update to current major version
        env:
          COMPOSER_ROOT_VERSION: "6.7.9999999-dev"
          DATABASE_URL: "mysql://root@127.0.0.1:3306/shopware_test"
        run: |
          rm -rf vendor-bin
          rm -rf vendor
          composer update -o
          bin/console system:update:finish

      - name: Checkout previous major version again
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # 4
        with:
          ref: ${{ env.PREVIOUS_MAJOR_VERSION_BRANCH }}

      - name: Setup Composer in previous major version again
        run: |
          rm -rf vendor-bin
          composer update -o
          bin/console system:generate-jwt-secret

      - name: Refresh theme in previous major version
        if: inputs.nightly == 'true'
        env:
          DATABASE_URL: "mysql://root@127.0.0.1:3306/shopware_test"
        run: bin/console theme:refresh

      - name: Run integration tests in previous major version
        if: inputs.nightly == 'true'
        run: php -d memory_limit=-1 vendor/bin/phpunit --testsuite "integration" --exclude-group=not-deterministic --stop-on-error --stop-on-failure

      - name: Run blue-green check
        if: inputs.nightly != 'true'
        env:
          DATABASE_URL: "mysql://root@127.0.0.1:3306/shopware_test"
        run: php .github/bin/blue-green-check.php

  # this allows us to specifiy just one required job/check
  # this is not practical with matrix jobs directly, because you've to specify all permutations
  check:
    if: always()
    needs:
      - acceptance
      - phpunit
      - win-checkout
      - code-ql
      - acceptance-update
      - blue-green-66-67

    runs-on: Ubuntu-latest
    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@05ac9388f0aebcb5727afa17fcccfecd6f8ec5fe # v1.2.2
        with:
          # allowed-failures: docs, linters
          # allow all jobs to be skipped in case of a PR run
          allowed-skips: acceptance, phpunit, win-checkout, code-ql, acceptance-update, blue-green-66-67
          jobs: ${{ toJSON(needs) }}
