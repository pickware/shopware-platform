name: Update milestone

on:
  pull_request_target:
    types:
      - opened
      - reopened
      - closed

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  set_milestone_label:
    name: Set milestone label
    if: ${{ github.event.action != 'closed' && !contains(join(github.event.pull_request.labels.*.name, ','), 'milestone/') }}
    runs-on: ubuntu-latest
    steps:
        - name: Get versions
          id: versions
          uses: shopware/github-actions/versions@main
        - name: Get next minor
          uses: actions/github-script@5c56fde4671bc2d3592fb0f2c5b5bab9ddae03b1 # 7
          id: next-milestone
          env:
            NEXT_MINOR: ${{ steps.versions.outputs.next-minor }}
            NEXT_PATCH: ${{ steps.versions.outputs.next-patch }}
          with:
            result-encoding: string
            script: |
                const nextMinor = process.env.NEXT_MINOR.substring(1);
                const nextPatch = process.env.NEXT_PATCH.substring(1);

                const versionRegex = new RegExp(/^([0-9]+).([0-9]+).([0-9]+).([0-9]+|x)$/, "mg");

                // Use next minor if target is trunk or is an issue
                if (context.payload.pull_request.base.ref == "trunk") {
                  return nextMinor;
                } else if (versionRegex.test(context.payload.pull_request.base.ref)) {
                    try {
                        await github.rest.repos.getReleaseByTag({
                            owner: "shopware",
                            repo: "shopware",
                            tag: `v${context.payload.pull_request.base.ref}`
                        });
                        // Use next patch if target is a version branch and the minor is released
                        return nextPatch;
                    } catch(err) {
                        // Use next minor if target is a version branch and the minor is not released
                        return `${context.payload.pull_request.base.ref}`;
                    }
                }

                // Skip if the PR doesn't target trunk or an version branch
                core.warning("This PR doesn't target 'trunk' or a version branch");
                return "skip";

        - name: Set milestone label
          if: ${{ steps.next-milestone.outputs.result != 'skip' }}
          uses: actions/github-script@5c56fde4671bc2d3592fb0f2c5b5bab9ddae03b1 # 7
          env:
            MILESTONE: ${{ steps.next-milestone.outputs.result }}
          with:
            script: |
              const milestone = process.env.MILESTONE;
              const issueNumber = context.payload.pull_request.number;

              await github.rest.issues.addLabels({
                ...context.repo,
                issue_number: issueNumber,
                labels: [`milestone/${milestone}`],
              }).then(res => {
                if (res.status !== 200) {
                  throw new Error(`Failed to add label "milestone/${milestone}" to issue/pull request #${issueNumber}`);
                } else {
                  core.info(`Label "milestone/${milestone}" added to pull request #${issueNumber}`);
                }
              });

  set_milestone:
    name: Set milestone
    if: ${{ github.event.action == 'closed' && github.event.pull_request.merged == true && contains(join(github.event.pull_request.labels.*.name, ','), 'milestone/') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # 4
      - shell: bash
        run: npm ci --prefix .github/bin/js/
      - name: Set milestone
        uses: actions/github-script@5c56fde4671bc2d3592fb0f2c5b5bab9ddae03b1 # 7
        with:
          script: |
            const { setMilestoneForPR } = await import('${{ github.workspace }}/.github/bin/js/node_modules/@shopware-ag/gh-project-automation/dist/index.mjs')
            await setMilestoneForPR({github, core, context})
